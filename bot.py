
class ChatForm(StatesGroup):
    partner_id = State()
    waiting_message = State()


from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import sqlite3

BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–°–Æ–î–ê"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
    KeyboardButton("üì¨ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
)
main_kb.add(
    KeyboardButton("üîç –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏—è"),
    KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('tasks.db')
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    description TEXT,
    budget TEXT,
    deadline TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS responses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id INTEGER,
    user_id INTEGER,
    message TEXT
)
""")
conn.commit()

# --- FSM –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ ---
class ResponseForm(StatesGroup):
    task_id = State()
    message = State()

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è üîß", reply_markup=main_kb)

@dp.message_handler(Text(equals="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"))
async def create_task(message: types.Message):
    await message.answer("–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")

@dp.message_handler(Text(equals="üì¨ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"))
async def my_tasks(message: types.Message):
    cursor.execute('SELECT id, title, description, budget, deadline FROM tasks WHERE user_id = ? ORDER BY id DESC LIMIT 5', (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    else:
        for task in tasks:
            task_id, title, description, budget, deadline = task
            cursor.execute('SELECT user_id, message FROM responses WHERE task_id = ?', (task_id,))
            responses = cursor.fetchall()
            text = f"<b>{title}</b>\n{description}\nüí∏ –ë—é–¥–∂–µ—Ç: {budget}\n‚è≥ –°—Ä–æ–∫: {deadline}"
            cursor.execute("SELECT executor_id, status FROM tasks WHERE id = ?", (task_id,))
            row = cursor.fetchone()
            if row and row[0]:
                text += f"\nüßë‚Äçüîß –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {row[0]}"
                kb.add(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"profile_{row[0]}"))
                text += f"\nüìå –°—Ç–∞—Ç—É—Å: {row[1]}"
            if responses:
                text += f"\n\n<b>–û—Ç–∫–ª–∏–∫–∏:</b>"
                for r_user_id, r_msg in responses:
                    text += f"\n‚Äî <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {r_user_id}:</i> {r_msg}"
            kb.add(InlineKeyboardButton("‚úÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data=f"assign_{task_id}_{r_user_id}"))
            kb.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"chat_{r_user_id}"))
            else:
                text += "\n\n–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤."
            kb = InlineKeyboardMarkup()
            kb.add(
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"complete_{task_id}"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{task_id}"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"), InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_{task_id}")
            )
            await message.answer(text, reply_markup=kb, parse_mode='HTML')

@dp.message_handler(Text(equals="üîç –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏—è"))
async def find_tasks(message: types.Message):
    cursor.execute('SELECT id, title, description, budget FROM tasks ORDER BY id DESC LIMIT 5')
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        for task_id, title, description, budget in tasks:
            text = f"<b>{title}</b>\n{description}\nüí∏ –ë—é–¥–∂–µ—Ç: {budget}"
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úâÔ∏è –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"respond_{task_id}")
            )
            await message.answer(text, reply_markup=kb, parse_mode='HTML')

@dp.message_handler(Text(equals="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.callback_query_handler(lambda c: c.data.startswith("respond_"))
async def respond_to_task(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[1])
    await state.update_data(task_id=task_id)
    await ResponseForm.message.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:")

@dp.message_handler(state=ResponseForm.message)
async def process_response(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute("INSERT INTO responses (task_id, user_id, message) VALUES (?, ?, ?)",
                   (data["task_id"], message.from_user.id, message.text))
    conn.commit()
    await message.answer("–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)



class TaskForm(StatesGroup):
    rate = State()
    title = State()
    category = State()
    description = State()
    budget = State()
    deadline = State()

@dp.message_handler(Text(equals="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"))
async def create_task(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è:")
    await TaskForm.title.set()

# –°–¢–ê–†–´–ô –•–≠–ù–î–õ–ï–† –£–î–ê–õ–Å–ù(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await TaskForm.description.set()

@dp.message_handler(state=TaskForm.description)
async def task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 —Ä—É–±):")
    await TaskForm.budget.set()

@dp.message_handler(state=TaskForm.budget)
async def task_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–Ω—è):")
    await TaskForm.deadline.set()

@dp.message_handler(state=TaskForm.deadline)
async def task_deadline(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute("INSERT INTO tasks (user_id, title, description, budget, deadline) VALUES (?, ?, ?, ?, ?)",
                   (message.from_user.id, data["title"], data["description"], data["budget"], message.text))
    conn.commit()
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=main_kb)
    await state.finish()



@dp.message_handler(state=TaskForm.title)
async def task_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)

    kb = InlineKeyboardMarkup(row_width=2)
    categories = [
        "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–£–±–æ—Ä–∫–∞", "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏", "–†–µ–º–æ–Ω—Ç –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "–†–µ–º–æ–Ω—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏", "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –ø–æ–º–æ—â—å", "–î–∏–∑–∞–π–Ω", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û",
        "–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏", "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –∏ –æ–±—É—á–µ–Ω–∏–µ", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å",
        "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", "–î–æ–º–∞—à–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏",
        "–†–µ–º–æ–Ω—Ç –∞–≤—Ç–æ", "–í—ã–µ–∑–¥–Ω–∞—è –∞–≤—Ç–æ—É—Å–ª—É–≥–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–î—Ä—É–≥–æ–µ"
    ]
    for name in categories:
        kb.insert(InlineKeyboardButton(name, callback_data=f"cat_{name}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb)
    await TaskForm.category.set()

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"), state=TaskForm.category)
async def select_category(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data[4:]
    await state.update_data(category=category)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await TaskForm.description.set()



@dp.message_handler(Text(equals="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
async def user_profile(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ?", (user_id,))
    posted = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM tasks WHERE performer_id = ?", (user_id,))
    completed = cursor.fetchone()[0]

    cursor.execute("SELECT AVG(rating) FROM ratings WHERE user_id = ?", (user_id,))
    avg_rating = cursor.fetchone()[0]
    avg_rating_text = f"{avg_rating:.1f} ‚≠ê" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    profile_text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>
"
        f"üÜî ID: <code>{user_id}</code>
"
        f"üè∑ –ò–º—è: {username}
"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating_text}
"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed}
"
        f"üìå –†–∞–∑–º–µ—â–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {posted}"
    )

    await message.answer(profile_text, parse_mode="HTML")



@dp.callback_query_handler(lambda c: c.data.startswith("finish_"))
async def finish_task(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[1])

    # –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –æ—Ç–∫–ª–∏–∫–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
    cursor.execute("SELECT user_id FROM responses WHERE task_id = ?", (task_id,))
    result = cursor.fetchone()
    if result:
        performer_id = result[0]
        await state.update_data(performer_id=performer_id)
        await bot.send_message(callback_query.from_user.id, "–û—Ü–µ–Ω–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç 1 –¥–æ 5:")
        await TaskForm.rate.set()
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")

@dp.message_handler(state=TaskForm.rate)
async def give_rating(message: types.Message, state: FSMContext):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            raise ValueError
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    data = await state.get_data()
    performer_id = data["performer_id"]

    cursor.execute("INSERT INTO ratings (user_id, rating) VALUES (?, ?)", (performer_id, rating))
    conn.commit()

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup=main_kb)
    await state.finish()



@dp.message_handler(content_types=ContentType.PHOTO, state=TaskForm.description)
async def task_description_with_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç):")

@dp.message_handler(state=TaskForm.description)
async def task_description_text(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await TaskForm.budget.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞–¥–∞–Ω–∏—è:")



@dp.callback_query_handler(lambda c: c.data.startswith("chat_"))
async def start_chat(callback_query: types.CallbackQuery, state: FSMContext):
    partner_id = int(callback_query.data.split("_")[1])
    await state.update_data(partner_id=partner_id)
    await ChatForm.waiting_message.set()
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:")

@dp.message_handler(state=ChatForm.waiting_message)
async def send_chat_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_id = data["partner_id"]
    await bot.send_message(partner_id, f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.id}:
{message.text}")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_kb)
    await state.finish()



@dp.callback_query_handler(lambda c: c.data.startswith("assign_"))
async def assign_executor(callback_query: types.CallbackQuery):
    _, task_id, executor_id = callback_query.data.split("_")
    task_id = int(task_id)
    executor_id = int(executor_id)
    cursor.execute("UPDATE tasks SET executor_id = ?, status = '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' WHERE id = ? AND user_id = ?", (executor_id, task_id, callback_query.from_user.id))
    conn.commit()
    await bot.send_message(executor_id, f"üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞–Ω–∏—è #{task_id}!")
    await bot.answer_callback_query(callback_query.id, text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω.")



class RateForm(StatesGroup):
    task_id = State()
    executor_id = State()
    rating = State()

@dp.callback_query_handler(lambda c: c.data.startswith("complete_"))
async def complete_task(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[1])
    cursor.execute("SELECT executor_id FROM tasks WHERE id = ? AND user_id = ?", (task_id, callback_query.from_user.id))
    row = cursor.fetchone()
    if row and row[0]:
        executor_id = row[0]
        cursor.execute("UPDATE tasks SET status = '–∑–∞–≤–µ—Ä—à–µ–Ω–æ' WHERE id = ?", (task_id,))
        conn.commit()
        await state.update_data(task_id=task_id, executor_id=executor_id)
        await RateForm.rating.set()
        await bot.send_message(callback_query.from_user.id, "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ—Ç 1 –¥–æ 5:")
    else:
        await bot.answer_callback_query(callback_query.id, text="–ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", show_alert=True)

@dp.message_handler(state=RateForm.rating)
async def rate_executor(message: types.Message, state: FSMContext):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    data = await state.get_data()
    executor_id = data["executor_id"]
    # –û–±–Ω–æ–≤–∏–º —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ)
    cursor.execute("SELECT rating, votes FROM users WHERE user_id = ?", (executor_id,))
    row = cursor.fetchone()
    if row:
        prev_rating, votes = row
        new_rating = (prev_rating * votes + rating) / (votes + 1)
        cursor.execute("UPDATE users SET rating = ?, votes = votes + 1 WHERE user_id = ?", (new_rating, executor_id))
    else:
        cursor.execute("INSERT INTO users (user_id, rating, votes) VALUES (?, ?, 1)", (executor_id, rating))
    conn.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", reply_markup=main_kb)
    await bot.send_message(executor_id, f"üéâ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {rating}/5")
    await state.finish()



@dp.message_handler(commands=["–ø—Ä–æ—Ñ–∏–ª—å"])
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT rating, votes FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        rating, votes = row
        await message.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
–†–µ–π—Ç–∏–Ω–≥: {rating:.2f} ‚≠êÔ∏è
–ì–æ–ª–æ—Å–æ–≤: {votes}")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞.")



@dp.callback_query_handler(lambda c: c.data.startswith("profile_"))
async def show_executor_profile(callback_query: types.CallbackQuery):
    executor_id = int(callback_query.data.split("_")[1])
    cursor.execute("SELECT rating, votes FROM users WHERE user_id = ?", (executor_id,))
    row = cursor.fetchone()
    if row:
        rating, votes = row
        text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id}:
–†–µ–π—Ç–∏–Ω–≥: {rating:.2f} ‚≠êÔ∏è
–ì–æ–ª–æ—Å–æ–≤: {votes}"
    else:
        text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id}:
–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞."
    await bot.send_message(callback_query.from_user.id, text)
    await bot.answer_callback_query(callback_query.id)
